<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet another programming blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vsuharnikov.github.io/"/>
  <updated>2017-02-26T05:31:27.000Z</updated>
  <id>https://vsuharnikov.github.io/</id>
  
  <author>
    <name>Vyatcheslav Suharnikov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Working with domain-specific errors in Dotty</title>
    <link href="https://vsuharnikov.github.io/2016/12/11/dotty-error-handling/"/>
    <id>https://vsuharnikov.github.io/2016/12/11/dotty-error-handling/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2017-02-26T05:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>A short time ago i experimented with <a href="https://github.com/lampepfl/dotty" rel="external nofollow noopener noreferrer" target="_blank">Dotty</a>, the future of Scala.<br>There is an interesting language’s feature: Union types.</p>
<p>For example, we are working on a configuration module and want to distinguish different types of errors:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Error</span></span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">FileNotFound</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">InvalidFormat</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadFrom</span></span>(file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>, <span class="type">Config</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>There also could be exceptions we forgot or don’t want to handle and convert to our errors hierarchy.</p>
<p>Then we add a new error and a method:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="comment">// …</span></div><div class="line">  <span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="comment">// …</span></div><div class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">OutOfSpace</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// …</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">saveTo</span></span>(config: <span class="type">Config</span>, file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span> <span class="comment">/* ? */</span>, <span class="type">Unit</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <em>InvalidFormat</em> error never happens here. But a user doesn’t know it, he have to handle all cases.<br>It’s true for the <em>loadFrom</em> too. </p>
<p>We could create another hierarchy of errors for <em>saveTo</em>, but this way is too bulky.</p>
<p>This issue is solved by the Dotty and its Union types:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Error</span></span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">FileNotFound</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">InvalidFormat</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line"></div><div class="line">  <span class="comment">// A new error</span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">OutOfSpace</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="comment">// Only two errors of three can happen</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadFrom</span></span>(file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>.<span class="type">FileNotFound</span> | <span class="type">Error</span>.<span class="type">InvalidFormat</span>, <span class="type">Config</span>] = ???</div><div class="line"></div><div class="line">  <span class="comment">// Only the one error</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">saveTo</span></span>(config: <span class="type">Config</span>, file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>.<span class="type">OutOfSpace</span>, <span class="type">Unit</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>It is straightforward to combine these methods in a for-comprehension and get the right type:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The type is Either[Error.FileNotFound | Error.InvalidFormat | Error.OutOfSpace, Unit]</span></div><div class="line"><span class="keyword">val</span> r = <span class="keyword">for</span> &#123;</div><div class="line">  config ← <span class="type">Config</span>.loadFrom(configFile)</div><div class="line">  <span class="comment">// …</span></div><div class="line">  _ ← <span class="type">Config</span>.saveTo(config, configFile)</div><div class="line">&#125; <span class="keyword">yield</span> newConfig</div></pre></td></tr></table></figure></p>
<p>This works too:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> r: <span class="type">Either</span>[<span class="type">Error</span>, <span class="type">Config</span>] = ??? <span class="comment">// Same code</span></div></pre></td></tr></table></figure></p>
<p>So, with this approach:</p>
<ol>
<li>We see all errors can happen;</li>
<li>The compiler helps you to handle expected errors;</li>
<li>You can easily handle expected errors with the power of a pattern-matching in a way you want;</li>
<li>Errors are joined in for-comprehensions.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A short time ago i experimented with &lt;a href=&quot;https://github.com/lampepfl/dotty&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_bla
    
    </summary>
    
    
      <category term="scala" scheme="https://vsuharnikov.github.io/tags/scala/"/>
    
      <category term="dotty" scheme="https://vsuharnikov.github.io/tags/dotty/"/>
    
      <category term="error" scheme="https://vsuharnikov.github.io/tags/error/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet another programming blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vsuharnikov.github.io/"/>
  <updated>2017-04-13T15:10:32.000Z</updated>
  <id>https://vsuharnikov.github.io/</id>
  
  <author>
    <name>Vyatcheslav Suharnikov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SBT and MissingRequirementError</title>
    <link href="https://vsuharnikov.github.io/2017/04/13/sbt-library-dependencies/"/>
    <id>https://vsuharnikov.github.io/2017/04/13/sbt-library-dependencies/</id>
    <published>2017-04-13T00:00:00.000Z</published>
    <updated>2017-04-13T15:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello there! </p>
<p>Today i created a new <em>SBT</em> project and got a cryptic error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[error] error while loading Object, Missing dependency &apos;object scala in compiler mirror&apos;, required by /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre/lib/rt.jar(java/lang/Object.class)</div><div class="line">[trace] Stack trace suppressed: run last pdfBoxTest/compile:compileIncremental for the full output.</div><div class="line">[error] (pdfBoxTest/compile:compileIncremental) scala.reflect.internal.MissingRequirementError: object scala in compiler mirror not found.</div><div class="line">[error] Total time: 3 s, completed Apr 13, 2017 5:52:34 PM</div></pre></td></tr></table></figure></p>
<p>I have been programming <em>Scala</em> and <em>SBT</em> for two years, but never faced this issue. Let’s see a piece of <em>build.sbt</em>:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> pdfBoxTest = (project in file(<span class="string">"pdfbox"</span>))</div><div class="line">  .settings(commonSettings: _*)</div><div class="line">  .settings(</div><div class="line">    fork in run := <span class="literal">true</span>,</div><div class="line">    libraryDependencies := <span class="type">Seq</span>(</div><div class="line">      <span class="string">"org.apache.pdfbox"</span> % <span class="string">"pdfbox"</span> % <span class="string">"2.0.5"</span></div><div class="line">    )</div><div class="line">  )</div></pre></td></tr></table></figure></p>
<p>It looks correct, but the error is in:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">libraryDependencies := <span class="type">Seq</span>(</div></pre></td></tr></table></figure></p>
<p>We redefined dependencies! Let’s inspect they:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show pdfBoxTest/libraryDependencies</div><div class="line">[info] List(org.apache.pdfbox:pdfbox:2.0.5)</div></pre></td></tr></table></figure></p>
<p>We will get more dependencies, if replace <code>:=</code> by <code>++=</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show pdfBoxTest/libraryDependencies</div><div class="line">[info] List(org.scala-lang:scala-library:2.11.8, org.apache.pdfbox:pdfbox:2.0.5)</div></pre></td></tr></table></figure></p>
<p>That’s it! The <em>SBT</em> adds <em>scala-library</em> by default. Don’t forget it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello there! &lt;/p&gt;
&lt;p&gt;Today i created a new &lt;em&gt;SBT&lt;/em&gt; project and got a cryptic error:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
    
      <category term="sbt" scheme="https://vsuharnikov.github.io/tags/sbt/"/>
    
      <category term="scala" scheme="https://vsuharnikov.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Working with JavaFX in Scala</title>
    <link href="https://vsuharnikov.github.io/2017/03/03/javafx-scala/"/>
    <id>https://vsuharnikov.github.io/2017/03/03/javafx-scala/</id>
    <published>2017-03-03T00:00:00.000Z</published>
    <updated>2017-03-03T06:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m working on a prototype of the GUI application, that helps me to be more productive. </p>
<p>At first i tried <a href="http://www.scalafx.org" rel="external nofollow noopener noreferrer" target="_blank">ScalaFX</a>, but faced with several problems (especially with the TableView).<br>So, i switched to the JavaFX and implemented all functionality two or three times faster.</p>
<p>JavaFX and Scala 2.12 are working together perfectly, thanks to the <a href="http://www.scala-lang.org/news/2.12.0#lambda-syntax-for-sam-types" rel="external nofollow noopener noreferrer" target="_blank">SAM</a>.<br>But there is a subtle problem. </p>
<p>Let’s look on an example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCustomControl</span> <span class="keyword">extends</span> <span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="meta">@FXML</span></div><div class="line">  <span class="keyword">private</span> TextField textField;</div><div class="line"></div><div class="line">  <span class="comment">// It could be any inner class</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable f = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.println(textField);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="comment">// Load a template by FXMLLoader in the constructor</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You could write an equivalent in Scala in the following way:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaCustomControl</span> <span class="keyword">extends</span> <span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="meta">@FXML</span> <span class="keyword">private</span> <span class="keyword">var</span> textField: <span class="type">TextField</span> = _</div><div class="line"></div><div class="line">  <span class="comment">// It might be any inner class</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> f: <span class="type">Runnable</span> = <span class="keyword">new</span> <span class="type">Runnable</span>() &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123;</div><div class="line">      <span class="type">System</span>.out.println(textField)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Load a template by FXMLLoader in the constructor</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Welcome to the trap! The <code>textField</code> will be null after the <code>FXMLLoader.load</code>, because the byte code for these two example are different.</p>
<p>Let’s use <code>:javap -private</code> on these classes:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span>.<span class="title">JavaCustomControl</span> <span class="keyword">extends</span> <span class="title">javafx</span>.<span class="title">scene</span>.<span class="title">layout</span>.<span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> javafx.scene.control.TextField textField;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.lang.Runnable f;</div><div class="line">  <span class="keyword">public</span> test.JavaCustomControl();</div><div class="line">  <span class="keyword">static</span> javafx.scene.control.TextField access$<span class="number">000</span>(test.JavaCustomControl);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>vs:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span>.<span class="title">ScalaCustomControl</span> <span class="keyword">extends</span> <span class="title">javafx</span>.<span class="title">scene</span>.<span class="title">layout</span>.<span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> javafx.scene.control.TextField test$ScalaCustomControl$$textField;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.lang.Runnable f;</div><div class="line">  <span class="keyword">public</span> javafx.scene.control.TextField test$ScalaCustomControl$$textField();</div><div class="line">  <span class="keyword">private</span> java.lang.<span class="function">Runnable <span class="title">f</span><span class="params">()</span></span>;</div><div class="line">  <span class="keyword">public</span> test.ScalaCustomControl();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you see, the Scala’s compiler mangle the <code>textField</code> variable.</p>
<p>How could you fix it? The only way is to make the <code>textField</code> public:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaCustomControl</span> <span class="keyword">extends</span> <span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="meta">@FXML</span> <span class="keyword">var</span> textField: <span class="type">TextField</span> = _</div><div class="line">  <span class="comment">// …</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Now the name isn’t mangled:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">test</span>.<span class="title">ScalaCustomControl</span> <span class="keyword">extends</span> <span class="title">javafx</span>.<span class="title">scene</span>.<span class="title">layout</span>.<span class="title">VBox</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> javafx.scene.control.<span class="type">TextField</span> textField;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’m working on a prototype of the GUI application, that helps me to be more productive. &lt;/p&gt;
&lt;p&gt;At first i tried &lt;a href=&quot;http://www.scal
    
    </summary>
    
    
      <category term="scala" scheme="https://vsuharnikov.github.io/tags/scala/"/>
    
      <category term="javafx" scheme="https://vsuharnikov.github.io/tags/javafx/"/>
    
  </entry>
  
  <entry>
    <title>Grepping logs without data loss</title>
    <link href="https://vsuharnikov.github.io/2017/02/26/grepping-logs-without-data-loss/"/>
    <id>https://vsuharnikov.github.io/2017/02/26/grepping-logs-without-data-loss/</id>
    <published>2017-02-26T00:00:00.000Z</published>
    <updated>2017-02-26T22:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#Solution">Solution</a></p>
<p>I use the <em>grep</em> to filter out logs, when the ELK is overkill. But, sometimes log entries have multiple lines and<br>the grepped result doesn’t contain all lines.</p>
<p>Let’s see an example.</p>
<p>logback.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>application.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] %-5level %logger&#123;5&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"example"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Main.scala:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> example</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.typesafe.scalalogging.<span class="type">StrictLogging</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Secondary</span> <span class="keyword">extends</span> <span class="title">StrictLogging</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = logger.trace(<span class="string">"&#123;&#125;\n&#123;&#125;"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">App</span> <span class="keyword">with</span> <span class="title">StrictLogging</span> </span>&#123;</div><div class="line">  logger.trace(<span class="string">"&#123;&#125;\n&#123;&#125;"</span>, <span class="string">"foo"</span>, <span class="string">"bar"</span>)</div><div class="line">  <span class="type">Secondary</span>.test()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When you run this code, the <em>application.log</em> will contain:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[11:40:53.882] TRACE e.Main$ - foo</div><div class="line">bar</div><div class="line">[11:40:53.891] TRACE e.Secondary$ - baz</div><div class="line">qux</div></pre></td></tr></table></figure></p>
<p>Obviously, <code>grep Main application.log</code> outputs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[11:40:53.882] TRACE e.Main$ - foo</div></pre></td></tr></table></figure></p>
<p>and the <code>bar</code> is missing.</p>
<p>So, the desired logs are:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[11:40:53.882] TRACE e.Main$ - foo</div><div class="line">[11:40:53.882] TRACE e.Main$ - bar</div><div class="line">[11:40:53.891] TRACE e.Secondary$ - baz</div><div class="line">[11:40:53.891] TRACE e.Secondary$ - qux</div></pre></td></tr></table></figure></p>
<h3 id="How-to-do-it"><a href="#How-to-do-it" class="headerlink" title="How to do it?"></a>How to do it?</h3><p>An each log entry has a prefix (<code>[11:40:53.882] TRACE e.Main$ -</code>).<br>We need to transform a log entry’s message in a such way:</p>
<ol>
<li>Get the prefix by a separator;</li>
<li>Replace all newlines by the prefix.</li>
</ol>
<p>Seems, we need a <em>ch.qos.logback.core.pattern.Converter</em>, that receives an argument (our separator).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Converter</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * The convert method is responsible for extracting data from the event and</div><div class="line">    * storing it for later use by the write method.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">convert</span><span class="params">(E event)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Such class exists in the <em>logback</em>, it is <em>ch.qos.logback.core.pattern.CompositeConverter</em>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeConverter</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">DynamicConverter</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> String <span class="title">transform</span><span class="params">(E event, String in)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol>
<li><p>Add <em>PrefixCompositeConverter</em> to your project:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> log</div><div class="line"></div><div class="line"><span class="keyword">import</span> ch.qos.logback.core.pattern.<span class="type">CompositeConverter</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrefixCompositeConverter</span>[<span class="type">E</span>] <span class="keyword">extends</span> <span class="title">CompositeConverter</span>[<span class="type">E</span>] </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * A splitter between the prefix and the message</div><div class="line">    */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> splitter: <span class="type">String</span> = _</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">start</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="type">Option</span>(getOptionList) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Some</span>(xs) <span class="keyword">if</span> xs.size() == <span class="number">1</span> =&gt;</div><div class="line">        splitter = xs.get(<span class="number">0</span>)</div><div class="line">        <span class="keyword">super</span>.start()</div><div class="line"></div><div class="line">      <span class="keyword">case</span> _ =&gt;</div><div class="line">        addError(<span class="string">"Please, specify the splitter"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">transform</span></span>(event: <span class="type">E</span>, in: <span class="type">String</span>): <span class="type">String</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (started) &#123;</div><div class="line">      in.indexOf(splitter) <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">-1</span> =&gt; in</div><div class="line">        <span class="keyword">case</span> i =&gt;</div><div class="line">          <span class="keyword">val</span> (prefix, rest) = in.splitAt(i)</div><div class="line">          <span class="comment">// \n is *nix-only ;)</span></div><div class="line">          prefix + rest.substring(splitter.length).replace(<span class="string">"\n"</span>, <span class="string">s"\n<span class="subst">$prefix</span>"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> in</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Change the <em>logback.xml</em> to:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"prefix"</span> <span class="attr">converterClass</span>=<span class="string">"log.PrefixCompositeConverter"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%prefix([%d&#123;HH:mm:ss.SSS&#125;] [%thread] %highlight(%-5level) %logger&#123;5&#125; - |%msg)&#123;"|"&#125;%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"example"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>Now, the <em>application.log</em> is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[12:28:31.502] TRACE e.Main$ - foo</div><div class="line">[12:28:31.502] TRACE e.Main$ - bar</div><div class="line">[12:28:31.540] TRACE e.Secondary$ - baz</div><div class="line">[12:28:31.540] TRACE e.Secondary$ - qux</div></pre></td></tr></table></figure></p>
<p>Done!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;#Solution&quot;&gt;Solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use the &lt;em&gt;grep&lt;/em&gt; to filter out logs, when the ELK is overkill. But, sometimes log entries 
    
    </summary>
    
    
      <category term="scala" scheme="https://vsuharnikov.github.io/tags/scala/"/>
    
      <category term="logback" scheme="https://vsuharnikov.github.io/tags/logback/"/>
    
      <category term="grep" scheme="https://vsuharnikov.github.io/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>Working with domain-specific errors in Dotty</title>
    <link href="https://vsuharnikov.github.io/2016/12/11/dotty-error-handling/"/>
    <id>https://vsuharnikov.github.io/2016/12/11/dotty-error-handling/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2017-02-26T05:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>A short time ago i experimented with <a href="https://github.com/lampepfl/dotty" rel="external nofollow noopener noreferrer" target="_blank">Dotty</a>, the future of Scala.<br>There is an interesting language’s feature: Union types.</p>
<p>For example, we are working on a configuration module and want to distinguish different types of errors:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Error</span></span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">FileNotFound</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">InvalidFormat</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadFrom</span></span>(file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>, <span class="type">Config</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>There also could be exceptions we forgot or don’t want to handle and convert to our errors hierarchy.</p>
<p>Then we add a new error and a method:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="comment">// …</span></div><div class="line">  <span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="comment">// …</span></div><div class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">OutOfSpace</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// …</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">saveTo</span></span>(config: <span class="type">Config</span>, file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span> <span class="comment">/* ? */</span>, <span class="type">Unit</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <em>InvalidFormat</em> error never happens here. But a user doesn’t know it, he have to handle all cases.<br>It’s true for the <em>loadFrom</em> too. </p>
<p>We could create another hierarchy of errors for <em>saveTo</em>, but this way is too bulky.</p>
<p>This issue is solved by the Dotty and its Union types:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Error</span></span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Error</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">FileNotFound</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">InvalidFormat</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line"></div><div class="line">  <span class="comment">// A new error</span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">OutOfSpace</span> <span class="keyword">extends</span> <span class="title">Error</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Config</span> </span>&#123;</div><div class="line">  <span class="comment">// Only two errors of three can happen</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadFrom</span></span>(file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>.<span class="type">FileNotFound</span> | <span class="type">Error</span>.<span class="type">InvalidFormat</span>, <span class="type">Config</span>] = ???</div><div class="line"></div><div class="line">  <span class="comment">// Only the one error</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">saveTo</span></span>(config: <span class="type">Config</span>, file: <span class="type">File</span>): <span class="type">Either</span>[<span class="type">Error</span>.<span class="type">OutOfSpace</span>, <span class="type">Unit</span>] = ???</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>It is straightforward to combine these methods in a for-comprehension and get the right type:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The type is Either[Error.FileNotFound | Error.InvalidFormat | Error.OutOfSpace, Unit]</span></div><div class="line"><span class="keyword">val</span> r = <span class="keyword">for</span> &#123;</div><div class="line">  config ← <span class="type">Config</span>.loadFrom(configFile)</div><div class="line">  <span class="comment">// …</span></div><div class="line">  _ ← <span class="type">Config</span>.saveTo(config, configFile)</div><div class="line">&#125; <span class="keyword">yield</span> newConfig</div></pre></td></tr></table></figure></p>
<p>This works too:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> r: <span class="type">Either</span>[<span class="type">Error</span>, <span class="type">Config</span>] = ??? <span class="comment">// Same code</span></div></pre></td></tr></table></figure></p>
<p>So, with this approach:</p>
<ol>
<li>We see all errors can happen;</li>
<li>The compiler helps you to handle expected errors;</li>
<li>You can easily handle expected errors with the power of a pattern-matching in a way you want;</li>
<li>Errors are joined in for-comprehensions.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A short time ago i experimented with &lt;a href=&quot;https://github.com/lampepfl/dotty&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_bla
    
    </summary>
    
    
      <category term="scala" scheme="https://vsuharnikov.github.io/tags/scala/"/>
    
      <category term="dotty" scheme="https://vsuharnikov.github.io/tags/dotty/"/>
    
      <category term="error" scheme="https://vsuharnikov.github.io/tags/error/"/>
    
  </entry>
  
</feed>
